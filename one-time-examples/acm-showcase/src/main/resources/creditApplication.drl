package com.camunda.bpm.examples.acm.business;

// own facts
import org.camunda.bpm.example.acm.*;
import org.camunda.bpm.example.acm.model.*;

// camunda ACM classes
import org.camunda.bpm.engine.acm.*;
import org.camunda.bpm.engine.acm.event.*;
import org.camunda.bpm.engine.impl.acm.*;
// camunda BPM Classes
import org.camunda.bpm.engine.task.*;
import org.camunda.bpm.engine.impl.*;

//declare any global variables here
global org.camunda.bpm.engine.acm.CaseService caseService;
global org.camunda.bpm.engine.TaskService taskService;
//global org.camunda.bpm.engine.delegate.VariableScope variables;

rule "Antrag neu erzeugt"
    when
    	CaseInstance(caseInstanceId : id)
    	CaseCreatedEvent()
    then
    	caseService.changeStage(caseInstanceId, "pruefung");
end

rule "Prüfungsphase eingetreten"
    when
    	CaseInstance(caseInstanceId : id)
    	CaseStageChangedEvent( newStage == "pruefung" )
    then        
        executeActivity(drools, caseService, caseInstanceId, "neueAntragPruefen");
        makeAvailable(drools, caseService, caseInstanceId, "gutachtenBestellen");
        makeAvailable(drools, caseService, caseInstanceId, "ratingsErstellen");
        makeAvailable(drools, caseService, caseInstanceId, "bewertungAbschliessen");
end

rule "Ratings muss freigegeben werden"
    when
    	TaskCompletedEvent(task.taskDefinitionKey == "ratingsErstellen")
    	CaseInstance(caseInstanceId : id) 	
    then
	    caseService.executeCaseActivity(caseInstanceId, "ratingsFreigeben", null);    
end


rule "Bewertung abschliessen ohne BoniU ist riskant"
    when
    	CaseInstance(caseInstanceId : id)
    	info : CaseInstanceInfo( availableActivityIds contains "bewertungAbschliessen")
    	// Wenn Aktivität bewertungAbschliessen aktiv ist
    	// BoniU nicht "analysiert" im Domänenmodell 
    then    
        // Warnung hinzufügen: BoniU nicht analysiert
        addWarning(drools, caseService, caseInstanceId, "bewertungAbschliessen", "BoniU nicht analysiert");
end

rule "Bewertung abschliessen ohne Gutachten ist riskant"
    when
    	CaseInstance(caseInstanceId : id)
    	info: CaseInstanceInfo( availableActivityIds contains "bewertungAbschliessen" )
    	// Wenn Aktivität bewertungAbschliessen aktiv ist
    	// Gutachten fehlt oder zu alt
    then
    	addWarning(drools, caseService, caseInstanceId, "bewertungAbschliessen", "Gutachten beachten");
end

rule "Meilenstein geprueft wird erreicht"
    when
    	TaskCompletedEvent(task.taskDefinitionKey == "bewertungAbschliessen")
    	CaseInstance(caseInstanceId : id) 	
    then
	    caseService.milestoneReached(caseInstanceId, "geprueft");    
	    caseService.changeStage(caseInstanceId, "votierung");
end


rule "Votierungsphase eingetreten"
    when
    	CaseInstance(caseInstanceId : id)
    	CaseStageChangedEvent( newStage == "votierung" )
    then        
        executeActivity(drools, caseService, caseInstanceId, "votumErstellen");
        makeAvailable(drools, caseService, caseInstanceId, "votumErstellen");        
end

rule "Genehmigungsphase eingetreten"
    when
    	CaseInstance(caseInstanceId : id)
    	CaseStageChangedEvent( newStage == "genehmigung" )
    then        
      // ...
end

rule "Abschlussphase eingetreten"
    when
    	CaseInstance(caseInstanceId : id)
    	CaseStageChangedEvent( newStage == "abschluss" )
    then        
      // ...
end

////// functions
function makeAvailable(org.drools.spi.KnowledgeHelper drools, CaseService caseService, String caseInstanceId, String activityId) {
	caseService.setCaseActivityAvailability(caseInstanceId, activityId, true, null);
	updateCaseInstanceInfo(drools, caseService, caseInstanceId);
}

function executeActivity(org.drools.spi.KnowledgeHelper drools, CaseService caseService, String caseInstanceId, String activityId) {
  caseService.executeCaseActivity(caseInstanceId, activityId, null);
  updateCaseInstanceInfo(drools, caseService, caseInstanceId);
}

function addWarning(org.drools.spi.KnowledgeHelper drools, CaseService caseService, String caseInstanceId, String activityId, String message) {
	caseService.setCaseActivityAvailability(caseInstanceId, activityId, true, 
			java.util.Collections.singletonList(CaseActivityMessage.createWarning(message)));
	// updateCaseInstanceInfo(drools, caseService, caseInstanceId);
}
function updateCaseInstanceInfo(org.drools.spi.KnowledgeHelper drools, CaseService caseService, String caseInstanceId) {
  // quick hack to update info object to reflect what we just did
  CaseInstanceInfo oldInfo = (CaseInstanceInfo) drools.getWorkingMemory().iterateObjects(new org.drools.ObjectFilter() {
      public boolean accept(Object object) {
        return (object instanceof CaseInstanceInfo);    
      }
  }).next();
  
  CaseInstanceInfo newInfo = caseService.getCaseInstanceInfo(caseInstanceId);
  org.drools.FactHandle handle = drools.getFactHandle(oldInfo);
  drools.update(handle, newInfo);
}